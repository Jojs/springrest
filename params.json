{
  "name": "Basic Spring REST web service",
  "tagline": "Exploring basic rest service with Spring",
  "body": "# springrest\r\nExploring basic rest service with Spring\r\n\r\n##Project Purpose\r\n2016-03-20, 11.30  \r\nAlmost every project I ever worked on were already years old, save for a few handful of mobile apps. Here I will explore how to start from scratch. In coming projects I will see how to harness the solution to enterprise scale.\r\nWhy choose Spring and rest? What do you do when entering unknown territory? - I call a friend :-) And he said \"Springboot and rest\", and sure enough there are lots of examples to find online. \r\nI use Spring for production and enterprise today. However, I have a little larger requirements to the final solution than this initial experiment will deliver, and that means building on top of this with other frameworks.\r\n\r\n##Basic Requirements\r\nCreate a tiny REST / JSON web service with an API that supports the following:  \r\nCreate new company  \r\nGet a list of all companies  \r\nGet details about a company  \r\nAble to update a company  \r\nAble to add beneficial owner(s) of the company  \r\n\r\nA company has the following attributes:  \r\nCompany ID  \r\nName  \r\nAddress  \r\nCity  \r\nCountry  \r\nE-mail (not required)  \r\nPhone Number (not required)  \r\nOne or more directors and beneficial owners.  \r\n\r\n##Create JavaScript client\r\nCreate a tiny client using a well-known Javascript framework e.g. Ember, Angularjs or like.\r\n\r\n##Versioning of data\r\nImplement versioning of all the data contained in the database.\r\n\r\n##Autentication and Authorization\r\nTODO - propose a protocol / method and justify your choice\r\n\r\n##Redundancy\r\nHow can you make the service redundant? What considerations should you do?\r\n\r\n##Enterprise considerations\r\n###Autentication and Authorization\r\n####Paswords and user data\r\nPasswords must be encrypted and have separate salts. Best of all is to use a slow hash function\r\nThere is a really good description here: https://crackstation.net/hashing-security.htm  \r\nAnother good strategy is to keep user data on another server than the main data. One standard solution is to use a LDAP hosted separately. Most often these provide salted and encrypted passwords and can integrate with multiple other authorisation services.\r\n\r\n\r\n##Source project\r\nhttp://ryanjbaxter.com/2014/12/17/building-rest-apis-with-spring-boot/\r\n\r\n\r\n\r\n##Misc\r\nUpload code to github and deploy to Heroku using Docker\r\nCreate an account and upload your code on GitHub and deploy it to Heroku as well. \r\nSee this guide for getting started with Heroku and Docker for local development.\r\n\r\n\r\nParagraphs are separated\r\nby a blank line.\r\n\r\nTwo spaces at the end of a line leave a  \r\nline break.\r\n\r\nText attributes _italic_, \r\n**bold**, `monospace`.\r\n\r\nBullet list:\r\n\r\n  * apples\r\n  * oranges\r\n  * pears\r\n\r\nNumbered list:\r\n\r\n  1. apples\r\n  2. oranges\r\n  3. pears\r\n\r\nA [link](http://example.com).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}